[["some-number-theory.html", "Chapter 7 Some number theory 7.1 Divisors and prime numbers 7.2 Euclid’s Algorithm", " Chapter 7 Some number theory 7.1 Divisors and prime numbers Let us recall the definition of divisor and prime numbers Definition 7.1 (divisor) Given two natural numbers \\(n\\) and \\(m\\) we say \\(n\\) is a divisor of \\(m\\) (or \\(n|m\\)) if there exists \\(k \\in \\mathbb{N}\\) such that \\(m=n\\times k\\). Definition 7.2 (prime number) While we define divisor it is worth defining a prime number. We call \\(p \\in \\mathbb{N}\\) a prime number if the only divisors of \\(p\\) are \\(1, p\\). Now we have some new definitions Definition 7.3 (greatest common divisor) Given two natural numbers \\(n\\) and \\(m\\) a number \\(q\\) that divides both of them is a common divisor and the largest such number is called the greatest common divisor we write \\(gcd(n,m)\\). This allows us to write a better definition of coprime Definition 7.4 (coprime) If \\(gcd(n,m)=1\\) then \\(n\\) and \\(m\\) are coprime. Theorem 7.1 (division with remainder) Suppose that \\(a \\in \\mathbb{Z}, b \\in \\mathbb{N}-\\{0\\}\\) then there exists \\(q \\in \\mathbb{Z}\\) and \\(r \\in [[b]]\\) such that \\[ a =bq+r. \\] Proof. If \\(b=1\\) we just take \\(q=a, r=0\\) so we can work in the case \\(b &gt;1\\). Let us fix \\(b\\) and prove the result by induction on \\(a\\). If \\(a=1\\) then \\(a=0\\times b+1\\). This is the base case. Now if we assume that there exists \\(q,r\\) such that \\(a-1 = qb +r\\) then either \\(r \\in [[b-1]]\\) in which case \\(a = qb + (r+1)\\) is a solution to our problem, or \\(r=b-1\\) in which case we write \\(a = (q+1)b\\). Example 7.1 How can we find the greatest common divisor of two numbers. One way to do it is by repeated division. We can apply repeated division with \\(81\\) and \\(51\\). We have \\[\\begin{align*} 81 &amp; = 1 \\times 51 + 30,\\\\ 51 &amp; = 1 \\times 30 + 21,\\\\ 30 &amp; = 1 \\times 21 + 9,\\\\ 21 &amp; = 2 \\times 9 + 3,\\\\ 9 &amp; = 3 \\times 3. \\end{align*}\\] We can also do this backwards to get \\[\\begin{align*} 9 &amp; = 3 \\times 3,\\\\ 21 &amp; = 2 \\times 9 + 3 = (2 \\times 3 +1) \\times 3 = 7 \\times 3,\\\\ 30 &amp; = 1 \\times 21 + 9 = (1 \\times 7 + 3) \\times 3 = 10 \\times 3,\\\\ 51 &amp; = (1 \\times 10 + 7) \\times 3 = 17 \\times 3,\\\\ 81 &amp; = (1 \\times 17 + 10) \\times 3 = 27 \\times 3. \\end{align*}\\] And we deduce from the that \\(gcd(81,51) = 3\\). Why does this work? We notice that if \\(c|a, c|b\\) then if \\(a=qb+r\\) then we must have that \\(c|r\\). Continuing on if \\(c|b\\) and \\(c|r\\) and \\(b=q_2 r+ r_2\\) then \\(c|r_2\\) and so on. If eventually you end up with a remainder term which is 0 then we terminate. This shoes that if we terminate with remainder \\(r_k\\) then \\(r_k|a\\) and \\(r_k| b\\) and that nothing larger than \\(r_k\\) can divide both \\(a\\) and \\(b\\). 7.2 Euclid’s Algorithm Taking inspiration from calculations like the one above we can write down a procedure to find the greatest common divisor of \\(a,b\\). Definition 7.5 (Euclid's Algorithm) Given \\(a, b \\in \\mathbb{N}\\) with \\(a &lt; b\\) we can write \\[\\begin{align*} b &amp;= q_1a + r_1, \\quad q_1 \\in \\mathbb{N}, r_1 \\in [[a]],\\\\ a &amp;= q_2r_1 + r_2, \\quad q_2 \\in \\mathbb{N}, r_2 \\in [[r_1]],\\\\ r_1 &amp;= q_3r_2 + r_3, \\quad q_3 \\in \\mathbb{N}, r_3 \\in [[r_2]],\\\\ r_2 &amp; = \\dots \\end{align*}\\] Eventually this process will terminate because we will have \\(r_k = 0\\) for some \\(k\\) and then we have \\(r_k = gcd(a,b)\\). Theorem 7.2 (Euclid's Algorithm) Given the algorithm above we have the following - This algorithm will terminate. i.e. eventually we have \\(r_{k-2} = q_k r_{k-1} + 0\\). - In this case \\(r_{k+1} = gcd(a,b)\\) - There exists \\(x,y \\in \\mathbb{Z}\\) such that \\(gcd(a,b) = xa+by\\). "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
